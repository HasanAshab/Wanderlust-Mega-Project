@Library('Shared') _
pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
        disableConcurrentBuilds()
        durabilityHint('PERFORMANCE_OPTIMIZED')
        preserveStashes(buildCount: 5)
    }

    tools {
        nodejs 'node:18'
    }

    parameters {
        string(name: 'SHORT_SHA', defaultValue: '', description: 'Short SHA of the commit')
    }

    stages {
        stage('Validate Params') {
            steps {
                script {
                    if (!params.SHORT_SHA?.trim()) {
                        error "Parameter SHORT_SHA is required but not provided!"
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('frontend') { 
                    sh 'npm ci'
                }
            }
        }

        stage('CI') {
            parallel {
                stage('Run Lint') {
                    steps {
                        dir('frontend') {
                            sh 'npm run lint'
                        }
                    }
                }

                stage('Run Tests') {
                    steps {
                        dir('frontend') {
                            sh 'npm test'
                        }
                    }
                }
            } 
        }

        stage('Docker') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        docker_login("docker.io", env.DOCKER_USER, env.DOCKER_PASS)
                        docker_build("hasan18205/wanderlust-frontend", params.SHORT_SHA, "frontend")
                        docker_push("hasan18205/wanderlust-frontend", params.SHORT_SHA)
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success { echo '✅ Pipeline succeeded!' }
        failure { echo '❌ Pipeline failed!' }
    }
}
